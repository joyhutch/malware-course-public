# # # # # # # # # # # # #
# # Windows VM Config # #
# # # # # # # # # # # # #

# # # # # # # #
# # Helpers # #
# # # # # # # #

function Set-RegKey {
    # https://devblogs.microsoft.com/scripting/update-or-add-registry-key-value-with-powershell/
    param (
        [Parameter(Mandatory)]
        [ValidateNotNullOrEmpty()]
        [string]$Path,

        [Parameter(Mandatory)]
        [ValidateNotNullOrEmpty()]
        [string]$Name,

        [Parameter(Mandatory)]
        [ValidateNotNullOrEmpty()]
        [string]$Value
    )

    if(!(Test-Path $Path)){
        New-Item -Path $Path -Force | Out-Null
        New-ItemProperty -Path $Path -Name $Name -Value $Value ` -PropertyType DWORD -Force | Out-Null
    }
    else {
        New-ItemProperty -Path $Path -Name $Name -Value $Value ` -PropertyType DWORD -Force | Out-Null
    }
    
}


# # # # # # # #
# # Options # #
# # # # # # # #

# python version
$PY_VERSION="3.10.2"
$PY_DIR="C:\Python310"
# If you can only run a single VM, set this to true. Otherwise, use Remnux 
$installWireshark = $false

# Want to play with other compilers? Of course you do!
$installOptionalCompilers = $true

# Disable ASLR : Warnining: this is dangerous outside of a VM! 
$aslr = @('ForceRelocateImages', 'BottomUp', 'HighEntropy')
# make sure to reboot after this
echo "[!!] Warninig: Disablaing ASLR. You should never do this outside of a sandbox!" 

# Note this needs to be run as admin
Foreach($i in $aslr){
    Set-ProcessMitigation -System -Disable $i
}
Set-RegKey -Path 'HKLM:\SYSTEM\CurrentControlSet\Control\Session Manager\Memory Management' -Name 'MoveImages' -Value '0'

# New workspace folders.  
$folders = @('payloads', 'tools', 'malware')
# Create folder, and set AV exclusion 
Foreach ($f in $folders){
    echo "[+] Creating New Folder C:\$f"
    New-Item -Path C:\ -Name $f -ItemType Directory -ErrorAction SilentlyContinue
    Add-MpPreference -ExclusionPath "C:\$f\"
}

# Turn off Microsoft reporting 
Set-MpPreference -MAPSReporting Disabled

# Turn off auto submission
Set-MpPreference -SubmitSamplesConsent NeverSend

# Disable Real Time monitoring  
Set-MpPreference -DisableRealtimeMonitoring $true



# Install tools. Feel free to customize
choco feature enable -n allowGlobalConfirmation

# Dev Tools. Required 
$install =@()
$install += @("openssh")
$install  +=  @('7zip','make', 'git', 'vscode', 'upx') # don't recognize a tool? google it :-)

# browser 
$install += @('googlechrome')

# Scripting 
$install += @('python3')

# Java
$install += @('openjdk11')

# Dep for wireshark
if($installWireshark){
    $install += @('winpcap')
}
## Compilers 
if($installCompilers){
    $install += @('mingw')
    if($installOptionalCompilers){
        $install += @('zig','llvm')
    }
}


Foreach($i in $install){
    echo "[+] Installing $i"
    choco install $i
}

# Some tools that will be helpful in this class. 
# For everything else you could possible need, check out FlareVM. It is basically the Kali linux of Reverse engineering. It is, however, a very thicc Vm.

$tools = @()
# Reverse Engineering Tools 

# deprecated for the course. Might add back later
$dep = @('dnspy', 'regshot')

$tools += @( 'x64dbg.portable', 'ghidra', 'pebear',  'reshack' )

if($installWireshark){
    $tools += @('wireshark')
}

Foreach($t in $tools){
    echo "[+] Installing $t to C:\tools\$t"
    choco install $t 
}
choco install "sysinternals" --params "/installDir:C:\tools\$t"

## IE first run
New-Item -Path "HKLM:\SOFTWARE\Policies\Microsoft\Internet Explorer"
New-Item -Path "HKLM:\SOFTWARE\Policies\Microsoft\Internet Explorer\Main"
New-ItemProperty -Path "HKLM:\SOFTWARE\Policies\Microsoft\Internet Explorer\Main" -Name DisableFirstRunCustomize -Value 1

# Refresh path env so you are ready to go!

$oldpath = (Get-ItemProperty -Path 'Registry::HKEY_LOCAL_MACHINE\System\CurrentControlSet\Control\Session Manager\Environment' -Name PATH).path
$newpath = $oldpath
$newpath = "$newpath;$PY_DIR\;"
$newpath = "$newpath$PY_DIR\Scripts\;"

Set-ItemProperty -Path 'Registry::HKEY_LOCAL_MACHINE\System\CurrentControlSet\Control\Session Manager\Environment' -Name PATH -Value $newPath
refreshenv



choco install python3 --version=$PY_VERSION

New-Alias python py 
# Update pip 
python -m pip install -U pip

# Global packages. For everything else, use a virtualenv!
python -m pip install  -U requests pefile virtualenv

# Install ipython 
python -m pip install  -U  ipython 


