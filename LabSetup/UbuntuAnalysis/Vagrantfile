# -*- mode: ruby -*-
# vi: set ft=ruby :

# All Vagrant configuration is done below. The "2" in Vagrant.configure
# configures the configuration version (we support older styles for
# backwards compatibility). Please don't change it unless you know what
# you're doing.
Vagrant.configure("2") do |config|
  # The most common configuration options are documented and commented below.
  # For a complete reference, please see the online documentation at
  # https://docs.vagrantup.com.

  # Every Vagrant development environment requires a box. You can search for
  # boxes at https://vagrantcloud.com/search.
  config.vm.box = "bento/ubuntu-22.04"
  config.vm.hostname = "ch0nky-gateway"

  # Disable automatic box update checking. If you disable this, then
  # boxes will only be checked for updates when the user runs
  # `vagrant box outdated`. This is not recommended.
  # config.vm.box_check_update = false

  # Create a forwarded port mapping which allows access to a specific port
  # within the machine from a port on the host machine. In the example below,
  # accessing "localhost:8080" will access port 80 on the guest machine.
  # NOTE: This will enable public access to the opened port
  # config.vm.network "forwarded_port", guest: 80, host: 8080

  # set the SSH forwarded port.
  # If you need this port for something else, change it  
  config.vm.network "forwarded_port", id: "ssh", host: 2223, host_ip: "127.0.0.1", guest: 22

  # Create a forwarded port mapping which allows access to a specific port
  # within the machine from a port on the host machine and only allow access
  # via 127.0.0.1 to disable public access
  # config.vm.network "forwarded_port", guest: 80, host: 8080, host_ip: "127.0.0.1"

  # Create a private network, which allows host-only access to the machine
  # using a specific IP.
  # config.vm.network "private_network", ip: "192.168.33.10"

  # Create a public network, which generally matched to bridged network.
  # Bridged networks make the machine appear as another physical device on
  # your network.
  # config.vm.network "public_network"
  config.vm.network "private_network", ip: "10.10.10.2", virtualbox__intnet: "ch0nky"

  # Share an additional folder to the guest VM. The first argument is
  # the path on the host to the actual folder. The second argument is
  # the path on the guest to mount the folder. And the optional third
  # argument is a set of non-required options.
  # config.vm.synced_folder "../data", "/vagrant_data"

  # Provider-specific configuration so you can fine-tune various
  # backing providers for Vagrant. These expose provider-specific options.
  # Example for VirtualBox:
  #
  # config.vm.provider "virtualbox" do |vb|
  #   # Display the VirtualBox GUI when booting the machine
  #   vb.gui = true
  #
  #   # Customize the amount of memory on the VM:
  #   vb.memory = "1024"
  # end
  #
  # View the documentation for the provider you are using for more
  # information on available options.
  config.vm.provider "virtualbox" do |vb|
    # Display the VirtualBox GUI when booting the machine
    # set to False because this has some buggy behavior. just cluck show 
    vb.gui = false
    vb.customize ["modifyvm", :id, "--vram", "128"]

    vb.customize ['modifyvm', :id, '--graphicscontroller', 'vmsvga']
  #   # Customize the amount of memory on the VM:
    vb.memory = "4096"
    vb.customize ["modifyvm", :id, "--cableconnected1", "on"]
    
    # Enable 3D acceleration. If you don't have a GPU, disable this.
    vb.customize ["modifyvm", :id, "--accelerate3d", "on"]
  end

  config.vm.provision "shell", path: "update_and_ssh.sh" 
  config.vm.provision "shell", path: "ubuntu_desktop.sh"
  config.vm.provision :reload

  config.vm.provision "shell", path: "tools.sh", privileged: false
  config.vm.provision "shell", path: "vbox_guestadditions.sh"
  #config.vm.provision "shell", path: "disable_cups.sh"
  config.vm.provision "shell", path: "conf_network.sh", privileged: false
  config.vm.provision "shell", path: "inetsim_conf.sh", privileged: false
  config.vm.provision :reload

end
