#!/usr/bin/python3

def reverse_rc4(ciphertext, key, key_length):
    local_128 = [i for i in range(256)]
    local_10 = 0
    local_14 = 0
    
    # Initialize the local_128 array
    for local_c in range(256):
        local_128[local_c] = local_c

    # Shuffle the local_128 array based on the key
    for local_18 in range(256):
        local_14 = (key[local_10 % key_length] + local_128[local_10] + local_14) % 256
        local_128[local_10], local_128[local_14] = local_128[local_14], local_128[local_10]
        local_10 += 1

    # Reverse the keystream generation and XOR with the ciphertext to get plaintext
    plaintext = bytearray()
    local_10 = 0
    local_14 = 0
    for local_20 in range(len(ciphertext)):
        local_10 = (local_10 + 1) % 256
        local_14 = (local_14 + local_128[local_10]) % 256
        local_128[local_10], local_128[local_14] = local_128[local_14], local_128[local_10]
        local_21 = local_128[(local_128[local_10] + local_128[local_14]) % 256]
        plaintext.append(ciphertext[local_20] ^ local_21)

    return plaintext

ciphertext = b'\x87\x7e\x34\xf8\x18\x32\xb3\x7b\xa2\x7d\x66\xf9\x3a\xba\xf1\xf6\x63\x59\x74\x2d\xf6\xd2\xcd\xce\xb7\x07\x36\x20\xb7'  
key = b'1337ch0nky'  
key_length = len(key)  

plaintext = reverse_rc4(ciphertext, key, key_length)
print("Decrypted plaintext:", plaintext)
