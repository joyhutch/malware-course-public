#!/usr/bin/python3

def reverse_rc4(ciphertext, key=b'1337ch0nky', key_length=10):
    local_128 = [i for i in range(256)]
    local_10 = 0
    local_14 = 0
    
    # Initialize the local_128 array
    for local_c in range(256):
        local_128[local_c] = local_c

    # Shuffle the local_128 array based on the key
    for local_18 in range(256):
        local_14 = (key[local_10 % key_length] + local_128[local_10] + local_14) % 256
        local_128[local_10], local_128[local_14] = local_128[local_14], local_128[local_10]
        local_10 += 1

    # Reverse the keystream generation and XOR with the ciphertext to get plaintext
    plaintext = bytearray()
    local_10 = 0
    local_14 = 0
    for local_20 in range(len(ciphertext)):
        local_10 = (local_10 + 1) % 256
        local_14 = (local_14 + local_128[local_10]) % 256
        local_128[local_10], local_128[local_14] = local_128[local_14], local_128[local_10]
        local_21 = local_128[(local_128[local_10] + local_128[local_14]) % 256]
        plaintext.append(ciphertext[local_20] ^ local_21)

    return plaintext

def format_as_byte_string(input_string):
    # Remove any leading '0x' if present
    if input_string.startswith('0x'):
        input_string = input_string[2:]

    # Convert hex string to bytes
    byte_string = bytes.fromhex(input_string)

    return byte_string

# ciphertext = '877e34f81832b37ba27d66f93abaf1f66359742df6d2cdceb7073620b7'
# ciphertext = format_as_byte_string(ciphertext)

# ciphertxts = [
#     # repeatedly sending same every minute
#     '877e34f81832b37ba27d66f93abaf1f66359742df6ce81d6f5002b65ea16e2147ec914', 
#     '877e34f81832b37ba27d66f93abaf1e87b557a2ef987c986a8083135b51dba4a7bdb534a',
#     '877e34f81832b37ba27d66f93abaf1ef6e423535ec8bdc9ae4016d37e207ec',
#     '877e34f81832b37ba27d66f93abaf1f6665f7660b080cfcbe21a2d38ea1be82649c2451b7f987ac307c8c83d26f16e030b43026e5bb2555eb7675a8b7e056a811b4f6f816af8473484f2cf56404aa7265a24ce',
#     '877e34f81832b37ba27d66f93abaf1f6665f7660fc81c3d6f21d382bfa07a10e70dd0a3842975d8602c8d6386eeb65560b5c1e22',
#     '917630ef5125be77af7e2fa96df0f3e263067b2be6d0'
# ]

ciphertxts = [
    '906336f21e32b335fd763ea73fa8b6bf38002570afde9e9ae4016d37e207ec'
]

plaintxts = []
key = b'1337ch0nky'  
key_length = len(key)  

for ciphertxt in ciphertxts:
    plaintext = reverse_rc4(format_as_byte_string(ciphertxt), key, key_length)
    print(plaintext)
