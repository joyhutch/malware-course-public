from typing import List, Dict, Optional
from abc import ABC, abstractmethod

# keys for mitre analysis dict
MITRE_TECHS = "Techniques"
COMMENTS = "Comments"

class MitreTactic(ABC):
    
    def __init__(self) -> None:
        self.techniques: List[str] = list()
        self.comments: Optional[str] = None
        
    def add_used_technique(self, tech: str):
        self.techniques.append(tech)
    
    def add_comment(self, note: str):
        self.comments = note
    
    def json_ready(self) -> dict:
        if len(self.used_techniques) == 0:
            print(f"preparing analysis of tactic {self.__class__.__name__} with no used techniques")
        
        if self.comments is None:
            return {MITRE_TECHS: self.used_techniques}
        else:
            return {
                MITRE_TECHS: self.used_techniques,
                COMMENTS: self.comments
            }
          
    @property
    @abstractmethod
    def id(self) -> str:
        pass
    
    @property
    def used_techniques(self) -> List[str]:
        return self.techniques
    
    @property
    def comment(self) -> Optional[str]:
        return self.comments
    
class Impact(MitreTactic):
    
    def __init__(self) -> None:
        super().__init__()
    
    @property
    def id(self) -> str:
        return "TA0040"
    
    @property
    def resrc_hijack(self) -> str:
        return "T1496"
    
    @property
    def deface(self) -> str:
        return "T1491"
    
    @property
    def data_manipulation(self) -> str:
        return "T1565"

class Execution(MitreTactic):
    
    def __init__(self) -> None:
        super().__init__()
    
    @property
    def id(self) -> str:
        return "TA0002"
    
    @property
    def native_api(self) -> str:
        return "T1106"
    
    @property
    def sched_job(self) -> str:
        return "T1053"
    
    @property
    def script_intr(self) -> str:
        return "T1059"
    
    @property
    def win_manage(self) -> str:
        return "T1047"
    
    @property
    def inter_process_comms(self) -> str:
        return "T1559"

class Persistence(MitreTactic):
    
    def __init__(self) -> None:
        super().__init__()
    
    @property
    def id(self) -> str:
        return "TA0003"
    
    @property
    def scheduled_task(self) -> str:
        return "T1053"
    
    @property
    def boot_autostart_exe(self) -> str:
        return "T1547" 

class Discovery(MitreTactic):
    
    def __init__(self) -> None:
        super().__init__()
    
    @property
    def id(self) -> str:
        return "TA0007"
    
    @property
    def sys_owner_usr(self) -> str:
        return "T1033"
    
    @property
    def permission_grs(self) -> str:
        return "T1069"
    
    @property
    def net_conf(self) -> str:
        return "T1016"
    
    @property
    def account(self) -> str:
        return "T1087"
    
    @property
    def software(self) -> str:
        return "T1518"
    
    @property
    def sys_info(self) -> str:
        return "T1082"
    
    @property
    def query_registry(self) -> str:
        return "T1012"
    
    @property
    def debugger_evasion(self) -> str:
        return "T1622"

class Defense(MitreTactic):
    
    def __init__(self) -> None:
        super().__init__()
    
    @property
    def id(self) -> str:
        return "TA0005"
    
    
    @property
    def hide_artifacts(self) -> str:
        return "T1564"
    
    @property
    def obfiscate_information(self) -> str:
        return "T1027"
    
    @property
    def deobfiscate(self) -> str:
        return "T1140"
    
    @property
    def process_injection(self) -> str:
        return "T1055"
    
    @property
    def execution_guard_rails(self) -> str:
        return "T1480"
    
class C2(MitreTactic):
    
    def __init__(self) -> None:
        super().__init__()
    
    @property
    def id(self) -> str:
        return "TA0011"
    
    @property
    def data_encoding(self) -> str:
        return "T1132"
    
    @property
    def data_obfiscation(self) -> str:
        return "T1001"
    
    @property
    def encrypted_channel(self) -> str:
        return "T1573"
    
    @property 
    def non_app_protocol(self) -> str:
        # non-application layer protocol (using SOCKS)
        return "T1095"
    
    @property
    def non_standard_port(self) -> str:
        return "T1571"
    
    @property
    def application_layer_protocol(self) -> str:
        return "T1071"
    
