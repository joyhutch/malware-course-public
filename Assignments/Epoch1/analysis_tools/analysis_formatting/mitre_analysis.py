from typing import List, Dict, Optional
from abc import ABC, abstractmethod

# keys for mitre analysis dict
MITRE_TECHS = "Techniques"
COMMENTS = "Comments"

class MitreTactic(ABC):
    
    def __init__(self) -> None:
        super().__init__()
        self.used_techniques: List[str] = list()
        self.comments: Optional[str] = None
        
    def add_used_technique(self, tech: str):
        self.used_techniques.append(tech)
    
    def add_comment(self, note: str):
        self.comments = note
    
    def json_ready(self) -> dict:
        if len(self.used_techniques) == 0:
            print(f"preparing analysis of tactic {self.__class__.__name__} with no used techniques")
        return {
            MITRE_TECHS: self.used_techniques,
            COMMENTS: self.comments
        }
          
    @property
    @abstractmethod
    def id(self) -> str:
        pass
    
    @property
    def used_techniques(self) -> List[str]:
        return self.used_techniques
    
    @property
    def comment(self) -> Optional[str]:
        return self.comments
    
class Impact(MitreTactic):
    
    def __init__(self) -> None:
        super().__init__()
    
    @property
    def id(self) -> str:
        return "TA0040"
    
    @property
    def resrc_hijack(self) -> str:
        return "T1496"
    
    @property
    def deface(self) -> str:
        return "T1491"
    
    @property
    def data_manipulation(self) -> str:
        return "T1565"

class Execution(MitreTactic):
    
    def __init__(self) -> None:
        super().__init__()
    
    @property
    def id(self) -> str:
        return "TA0002"
    
    @property
    def native_api(self) -> str:
        return "T1106"
    
    @property
    def sched_job(self) -> str:
        return "T1053"
    
    @property
    def script_intr(self) -> str:
        return "T1059"
    
    @property
    def win_manage(self) -> str:
        return "T1047"

class Persistence(MitreTactic):
    
    def __init__(self) -> None:
        super().__init__()
    
    @property
    def id(self) -> str:
        return "TA0003"
    
    # Define properties for associated techniques...

class Discovery(MitreTactic):
    
    def __init__(self) -> None:
        super().__init__()
    
    @property
    def id(self) -> str:
        return "TA0007"
    
    # Define properties for associated techniques...

class Defense(MitreTactic):
    
    def __init__(self) -> None:
        super().__init__()
    
    @property
    def id(self) -> str:
        return "TA0005"
    
    # Define properties for associated techniques...

class C2(MitreTactic):
    
    def __init__(self) -> None:
        super().__init__()
    
    @property
    def id(self) -> str:
        return "TA0011"
    
    # Define properties for associated techniques...