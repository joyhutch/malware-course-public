#!/usr/bin/python3

from analysis_tools.analysis_formatting.mitre_analysis import MitreTactic, Impact, Persistence, Defense, Discovery, Execution, C2
from analysis_tools.analysis_formatting.formatting_classes import IOC_types, Malware_types, IOC, BinAnalysis, EpochAssignment

ioc_types = IOC_types()
malware_types = Malware_types()
epoch1 = EpochAssignment("epoch1")

# FLAGS ----------------------------------------------------------------------
# in sus_exe string dump
epoch1.found_flag("FLAG{TodaysQuizWhyIsNotepadDoingNetworkIO}") 
# in StartExam string dump
epoch1.found_flag("FLAG{TotallyLegitMutex}")

# C2 Server ------------------------------------------------------------------
epoch1.found_C2("exam.gradeschopech0nky.com", "64.225.59.165")

# BINARIES 
# SUSPICIOUS.EPOCH1.EXE ------------------------------------------------------
sus_exe = BinAnalysis("suspicous.epoch1.exe")
sus_exe.set_arch(64)
sus_exe.set_comp_time("65d41e4e")
# no matches on virus total
sus_exe.set_sha256("4a548f161dfbda599686c15c56bd81eab176668cfab00bc31df31fe2032e8343") 
sus_exe.set_imphash("8ff386ea4029e407f75e80606cb72508")

sus_exe_imports = {
    "KERNEL32.dll": [
        "CloseHandle",
        "CreateProcessW",
        "CreateRemoteThread",
        "FreeConsole",
        "FreeLibrary",
        "GetFileAttributesA",
        "GetModuleHandleA",
        "GetProcAddress",
        "GetStartupInfoA",
        "GetTempPathW",
        "LoadLibraryW",
        "Sleep",
        "TlsGetValue",
        "VirtualAllocEx",
        "VirtualFreeEx",
        "VirtualProtect",
        "VirtualQuery",
        "WriteProcessMemory"
    ],
    "PSAPI.DLL": [
        "EnumProcessModules",
        "GetModuleFileNameExW"
    ],
    "SHLWAPI.dll": [
        "PathCombineW"
    ],
    "WININET.dll": [
        "DeleteUrlCacheEntryW"
    ],
    "urlmon.dll": [
        "URLDownloadToFileW",
        "UrlMkSetSessionOption"
    ]
}
sus_exe.set_sus_imports(sus_exe_imports)

sus_exe_strs = [
    "!This program cannot be run in DOS mode. $",
    "1337ch0nH",
    "ExamMonitor.dll",
    "https://exam.gradescopech0nky.com/StartExam",
    "StartExam",
    "FLAG{TodaysQuizWhyIsNotepadDoingNetworkIO}",
    "C:\\malware\\ch0nky.txt",
    "kernel32",
    "LoadLibraryW"
]
sus_exe.set_sus_strings(sus_exe_strs)

sus_exe.set_verdict(True)
sus_exe.set_malware_type(malware_types.dropper)
sus_exe.set_verdict_rationale("loads and runs StartExam") 

# ioc analysis ------------------------------
sus_exe.add_ioc(IOC(ioc_types.URL, "https://exam.gradescopech0nky.com/StartExam", "URL found in PE strings"))
sus_exe.add_ioc(IOC(ioc_types.DLL, "ExamMonitor.dll", "DLL that does not exist in the current PE"))
sus_exe.add_ioc(IOC(ioc_types.domain, "exam.gradeschopech0nky.com", "C2 server domain"))
sus_exe.add_ioc(IOC(ioc_types.IP, "64.225.59.165", 'IP addr of C2 server'))
sus_exe.add_ioc(IOC(ioc_types.file_name, "C:\\malware\\ch0nky.txt", "signature check for ch0nky.txt before execution"))
sus_exe.add_ioc(IOC(ioc_types.DLL_exported_function, 'StartExam', "exported function that is called after DLL is downloaded"))

# mitre analysis ----------------------------
defense_evasion = Defense()
defense_evasion.add_used_technique(defense_evasion.hide_artifacts)
defense_evasion.add_used_technique(defense_evasion.process_injection)
defense_evasion.add_used_technique(defense_evasion.execution_guard_rails)
defense_evasion.add_comment("calling FreeConsole, the injection and execution of ExamMonitor.dll, checking of ch0nky.txt before execution")
sus_exe.add_mitre_tactic(defense_evasion)

execution = Execution()
execution.add_used_technique(execution.native_api)
execution.add_used_technique(execution.inter_process_comms)
execution.add_comment("using remote threading to execute ExamMonitor.dll")
sus_exe.add_mitre_tactic(execution)

impact = Impact()
impact.add_used_technique(impact.data_manipulation)
impact.add_comment("downloading of ExamMonitor.dll and injection into system")
sus_exe.add_mitre_tactic(impact)

# EXAM MONITOR ---------------------------------------------------------------
exam_monitor = BinAnalysis("ExamMonitor.dll")
exam_monitor.set_arch(64)
exam_monitor.set_comp_time('65d41e61')
exam_monitor.set_sha256('7b445bf8e7e6d1b00d62a810b2462f426d8dde4ba01a8dff994ff24b1fe10212')
# no matches on virus total
exam_monitor.set_imphash('7130f486d66d68ca3145bd8bc1516d6b')

sus_exam_monitor_imports = {
    "ADVAPI32.dll": [
        "GetUserNameA",
        "RegCloseKey",
        "RegOpenKeyExA",
        "RegQueryValueExA",
        "RegSetValueExA"
    ],
    "KERNEL32.dll": [
        "CreatePipe",
        "CreateProcessA",
        "CreateThread",
        "FreeConsole",
        "GetComputerNameA",
        "GetCurrentThreadId",
        "GetProcAddress",
        "LoadLibraryW",
        "Sleep",
        "SuspendThread",
        "WriteProcessMemory"
    ],
    "SHELL32.dll": [
        "ShellExecuteA"
    ],
    "WINHTTP.dll": [
        "WinHttpCloseHandle",
        "WinHttpConnect",
        "WinHttpOpen",
        "WinHttpOpenRequest",
        "WinHttpQueryDataAvailable",
        "WinHttpReadData",
        "WinHttpReceiveResponse",
        "WinHttpSendRequest",
        "WinHttpSetOption"
    ]
}
exam_monitor.set_sus_imports(sus_exam_monitor_imports)

sus_start_exam_strs = [
    "notepad.H",
    "kernel32H",
    "IsDebuggH",
    "erPresenH",
    "l bug reI",
    "not enouI",
    "gh spaceH",
    "for forH",
    "mat expaI",
    "nsion (PI",
    "lease suI",
    "bmit fulH",
    "https://L)",
    "port at H",
    "gcc.gnu.H",
    "org/bugsH",
    "/): H",
    "l bug reH)",
    "bmit fulH",
    "https://H",
    "port at H",
    "org/bugsH",
    "gcc.gnu.H",
    "AUATH",
    "1337ch0nky",
    "auth=",
    "1337ch0nky",
    "&guid=",
    "&user=",
    "&computer=",
    "/register.php",
    "gradescopech0nky.com",
    "1337ch0nky",
    "/checkin.php",
    "<ch0nky>",
    "register",
    "execute",
    "no args",
    "inject",
    "Unknown command",
    "vector::_M_realloc_insert",
    "basic_string::_M_construct null not valid",
    "/c \\Windows\\system32\\schtasks.exe /create /tn \"",
    "WindwosUpdate",
    "\" /sc minute /mo 1 /tr 'rundll32.exe",
    "StartExam",
    "Authorization:",
    "Content-Type: application/x-www-form-urlencoded",
    "cannot create std::vector larger than max_size()",
    "vector::_M_default_append",
    "basic_string::_M_construct null not valid",
    "powershell.exe /c",
    "Buffer component: %s",
    "SOFTWARE\\Microsoft\\Cryptography",
    "MachineGuid",
    "Unknown",
    "FLAG{TotallyLegitMutex}",
    "C:\\malware\\ch0nky.txt",
    "Software\\Microsoft\\Windows\\CurrentVersion\\Run",
    "ch0nky",
    "cannot create std::vector larger than max_size()",
    "basic_string::_M_construct null not valid",
    "0123456789abcdef",
    "vector::_M_realloc_insert",
    "what():",
    "0123456789",
    "basic_string::_M_create",
    "backdoor.dll"
]
exam_monitor.set_sus_strings(sus_start_exam_strs)

# ioc analysis -------------------------------------------
exam_monitor.add_ioc(IOC(ioc_types.scheduled_task, 
                         "WindwosUpdate",
                         "incorrectly spelled 'WindowsUpdate' task"))
exam_monitor.add_ioc(IOC(ioc_types.URL, 
                         'gradescopech0nky.com/login.php'))
exam_monitor.add_ioc(IOC(ioc_types.URL,
                         'gradescopech0nky.com/checkin.php'))
exam_monitor.add_ioc(IOC(ioc_types.PE_string, 
                         'inject', 
                         'indicates something is being executed or injected'))
exam_monitor.add_ioc(IOC(ioc_types.file_name, "C:\\malware\\ch0nky.txt", "signature check for ch0nky.txt before execution"))

exam_monitor.set_verdict(True)
exam_monitor.set_malware_type(malware_types.remote_access_trojan)
exam_monitor.set_verdict_rationale("schedules the StartExam function to run and report back to the C2 server every minute")

# mitre analysis -------------------------------------------
em_discovery = Discovery()
em_discovery.add_used_technique(em_discovery.query_registry)
em_discovery.add_used_technique(em_discovery.sys_info)
em_discovery.add_used_technique(em_discovery.account)
em_discovery.add_comment("for registry query functions, GetComputerNameA, and GetUserNameA")
exam_monitor.add_mitre_tactic(em_discovery)

em_defense = Defense()
em_defense.add_used_technique(em_defense.hide_artifacts)
em_defense.add_used_technique(em_discovery.debugger_evasion)
em_defense.add_used_technique(em_defense.deobfiscate)
em_defense.add_used_technique(em_defense.process_injection)
em_defense.add_used_technique(em_defense.execution_guard_rails)
em_defense.add_used_technique("for FreeConsole, isDebuggerPresent & extended sleep calls, for decryption of C2 commands, data injection into notepad.exe on 'inject' commands from C2, and check for ch0nky.txt before execution")
exam_monitor.add_mitre_tactic(em_defense)

em_execution = Execution()
em_execution.add_used_technique(em_execution.native_api)
em_execution.add_used_technique(em_execution.sched_job)
em_execution.add_used_technique(em_execution.script_intr)
em_execution.add_used_technique(em_execution.inter_process_comms)
em_execution.add_used_technique("for using windows api, ScheduleTaskA and rundll32 to schedule StartExam to run, using 'cmd' to execute things, and piping responses from powershell execution")
exam_monitor.add_mitre_tactic(em_execution)

em_persistence = Persistence()
em_persistence.add_used_technique(em_persistence.boot_autostart_exe)
em_persistence.add_comment("adds ExamMonitor.dll to WinRegistry to run on user login")
exam_monitor.add_mitre_tactic(em_persistence)

em_C2 = C2()
em_C2.add_used_technique(em_C2.encrypted_channel)
em_C2.add_used_technique(em_C2.application_layer_protocol)
em_C2.add_comment("uses Rc4 encryption/decryption between C2 server, uses HTTPS and standard port 443 for communcation")
exam_monitor.add_mitre_tactic(em_C2)

# no impact techniques
"""
DISCOVERY -------------------
Uses RegOpenKeyExA and RegQueryValueExA to access registry key associated with 
SOFTWARE\\Microsoft\\Cryptography using read/exe permissions and query the value for 'MachineGuid' -> query registry
GetComputerNameA -> sys info 
GetUserNameA -> 

C2 -------------------
gradescopech0nky.com
port 443
uses Rc4 encryption 

"""

# add all analyzed binaries and prep submission ------------------------------
epoch1.add_binary_analysis(sus_exe)
epoch1.add_binary_analysis(exam_monitor)
epoch1.prepare_submission()