#!/usr/bin/python3

from typing import List, Dict, Optional
import json
from abc import ABC, abstractmethod
from analysis_formatting.mitre_analysis import MitreTactic

# keys for bin analysis dict
BIN_NAME = "binary_name"
SHA_HASH = "sha256"
IMPHASH = "imphash"
ARCH = "arch"
COMP_TIME = "compile_time"
STRS = "strings"
IMPORTS = "imports"
IOCS = "iocs"
MITRE_ATTACK = "mitre_att&ck"
MALWARE_VERDICT = "verdict"
MALWARE_CLASS = "classification"
VERDICT_NOTE = "verdict_justification"

# keys for ioc analysis dict
IOC_TYPE = "type"
IOC_VAL = "Value"
IOC_NOTES = "Comments"

# util class that returns one of the IOC types defined in Epoch0 README.md
# as a string
class IOC_types:
    
    @property
    def sha256(self) -> str:
        return "sha256"
    
    @property
    def imphash(self) -> str:
        return "imphash"

    @property
    def domain(self) -> str:
        return "domain"

    @property
    def URL(self) -> str:
        return "URL"

    @property
    def IP(self) -> str:
        return "IP"

    @property
    def file_name(self) -> str:
        return "file_name"

    @property
    def scheduled_task(self) -> str:
        return "scheduled_task"

    @property
    def run_key(self) -> str:
        return "run_key"

    @property
    def DLL(self) -> str:
        return "DLL"

    @property
    def DLL_exported_function(self) -> str:
        return "DLL_exported_function"

    @property
    def PE_string(self) -> str:
        return "PE_string"

    @property
    def mutex(self) -> str:
        return "mutex"

    @property
    def named_pipe(self) -> str:
        return "named_pipe"

# util class that returns one of the Malware types defined in Epoch0 README.md
# as a string
class Malware_types: 
    @property
    def ransomware(self) -> str:
        return "ransomware"

    @property
    def scareware_trolling(self) -> str:
        return "scareware/trolling"

    @property
    def dropper(self) -> str:
        return "dropper"

    @property
    def loader(self) -> str:
        return "loader"

    @property
    def worm(self) -> str:
        return "worm"

    @property
    def stealer(self) -> str:
        return "stealer"

    @property
    def spyware(self) -> str:
        return "spyware"

    @property
    def root_kit(self) -> str:
        return "root_kit"

    @property
    def reverse_shell(self) -> str:
        return "reverse_shell"

    @property
    def remote_access_trojan(self) -> str:
        return "remote_access_trojan"

    @property
    def crypto_miner(self) -> str:
        return "crypto_miner"

    @property
    def wiper(self) -> str:
        return "wiper"

    @property
    def adware(self) -> str:
        return "adware"

    @property
    def generic_hackingtool(self) -> str:
        return "generic/hackingtool"

# class to store IOCs found during analysis
# that will format itself in the templated 
# dict form 
class IOC:
    
    def __init__(self, ioc_type: str,
                 ioc_val: str, 
                 ioc_notes: Optional[str] = None) -> None:
        self.type = ioc_type
        self.value = ioc_val
        self.notes = ioc_notes
    
    def json_ready(self) -> Dict[str, str]:
        return {
            IOC_TYPE: self.type,
            IOC_VAL: self.value,
            IOC_NOTES: self.notes
        }
    
class BinAnalysis:
    
    def __init__(self, bin_name: str) -> None:
        self.fname = bin_name
        self.iocs: List[IOC] = []
        self.mitre_tactics: List[MitreTactic] = []
    
    def set_sha256(self, sha: str):
        self.sha256 = sha 
    
    def set_imphash(self, hash: str):
        self.imphash = hash
        
    def set_arch(self, arch: int):
        self.arch = arch
    
    def set_comp_time(self, t: int):
        self.comp_time = t
    
    def set_sus_strings(self, str_list: List[str]):
        self.strs = str_list
    
    def set_sus_imports(self, import_list: Dict[str, List[str]]):
        self.imports = import_list
        
    def add_ioc(self, ioc: IOC):
        assert(ioc is not None)
        self.iocs.append(ioc)
    
    def add_mitre_tatic(self, tactic: MitreTactic):
        assert(tactic is not None)
        self.mitre_tactics.append(tactic)

    def set_verdict(self, is_malware: bool):
        self.is_malware = is_malware
    
    def set_verdict_rationale(self, note: str):
        self.note = note
    
    def set_malware_type(self, malware_type: str):
        self.malware_type = malware_type
    
    def json_ready(self) -> dict:
        assert(self.fname is not None)
        assert(self.sha256 is not None)
        assert(self.imphash is not None)
        assert(self.arch is not None)
        assert(self.comp_time is not None)
        assert(self.strs is not None)
        assert(self.imports is not None)
        assert(self.is_malware is not None)
        assert(self.malware_type is not None)
        
        bin_analysis = {
            BIN_NAME: self.fname,
            SHA_HASH: self.sha256,
            IMPHASH: self.imphash,
            ARCH: self.arch,
            COMP_TIME: self.comp_time,
            STRS: self.strs,
            IMPORTS: self.imports,
            IOCS: [ioc.json_ready() for ioc in self.iocs],
            MITRE_ATTACK: {
                tactic.id: tactic.json_ready() for tactic in self.mitre_tactics
                },
            MALWARE_VERDICT: self.is_malware,
            MALWARE_CLASS: self.malware_type,
            VERDICT_NOTE: self.note
        }
        
        try:
            json.dumps(bin_analysis)
        except Exception as e:
            print(f"encountered error while preparing {self.fname} for json formatting")
            print(e)
            quit(1)
        
        return bin_analysis
            
class EpochAssignment:
    
    def __init__(self, name: str) -> None:
        self.name = name
        self.flags = list()
        self.C2S = list()
        self.bins: List[BinAnalysis] = list()
        
    def found_flag(self, flag: str):
        self.flags.append(flag)
    
    def found_C2(self, domain: str, ip: str):
        self.C2S.append([domain, ip])
    
    def add_binary_analysis(self, bin: BinAnalysis):
        self.bins.append(bin)
    
    def prepare_submission(self):
        epoch_analysis = {
            'binaries' : [bin.json_ready() for bin in self.bins],
            'Flags' : self.flags,
            'C2s': self.C2S
        } 
        
        with open(f'{self.name}_submission.json', 'w') as f:
            json.dump(epoch_analysis, f, indent=4)
    